[{"/home/esteban/Documents/TrackCOVID-community/app2/src/index.js":"1","/home/esteban/Documents/TrackCOVID-community/app2/src/App.js":"2","/home/esteban/Documents/TrackCOVID-community/app2/src/i18n.js":"3","/home/esteban/Documents/TrackCOVID-community/app2/src/serviceWorkerRegistration.js":"4","/home/esteban/Documents/TrackCOVID-community/app2/src/reportWebVitals.js":"5","/home/esteban/Documents/TrackCOVID-community/app2/src/themes/dark.js":"6","/home/esteban/Documents/TrackCOVID-community/app2/src/themes/light.js":"7","/home/esteban/Documents/TrackCOVID-community/app2/src/Exposures.js":"8","/home/esteban/Documents/TrackCOVID-community/app2/src/Checkpoints.js":"9","/home/esteban/Documents/TrackCOVID-community/app2/src/Report.js":"10","/home/esteban/Documents/TrackCOVID-community/app2/src/StatusAlert.js":"11","/home/esteban/Documents/TrackCOVID-community/app2/src/languages.js":"12","/home/esteban/Documents/TrackCOVID-community/app2/src/api.js":"13","/home/esteban/Documents/TrackCOVID-community/app2/src/translations/en.js":"14","/home/esteban/Documents/TrackCOVID-community/app2/src/translations/es.js":"15"},{"size":1325,"mtime":1609455622932,"results":"16","hashOfConfig":"17"},{"size":8825,"mtime":1609455701172,"results":"18","hashOfConfig":"17"},{"size":1413,"mtime":1609455660804,"results":"19","hashOfConfig":"17"},{"size":5064,"mtime":1609455157882,"results":"20","hashOfConfig":"17"},{"size":364,"mtime":1609455157882,"results":"21","hashOfConfig":"17"},{"size":270,"mtime":1609455677852,"results":"22","hashOfConfig":"17"},{"size":271,"mtime":1609455677856,"results":"23","hashOfConfig":"17"},{"size":2454,"mtime":1609455660768,"results":"24","hashOfConfig":"17"},{"size":6161,"mtime":1609455660696,"results":"25","hashOfConfig":"17"},{"size":2096,"mtime":1609455660880,"results":"26","hashOfConfig":"17"},{"size":604,"mtime":1609455660932,"results":"27","hashOfConfig":"17"},{"size":138,"mtime":1609455660840,"results":"28","hashOfConfig":"17"},{"size":1223,"mtime":1609455660652,"results":"29","hashOfConfig":"17"},{"size":2075,"mtime":1609455677884,"results":"30","hashOfConfig":"17"},{"size":2075,"mtime":1609455677888,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"18fo89t",{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},"/home/esteban/Documents/TrackCOVID-community/app2/src/index.js",[],["70","71"],"/home/esteban/Documents/TrackCOVID-community/app2/src/App.js",["72","73","74","75","76","77"],"import React, { Suspense } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport CropFree from \"@material-ui/icons/CropFree\";\nimport Face from \"@material-ui/icons/Face\";\nimport PinDropIcon from \"@material-ui/icons/PinDrop\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport ReportIcon from \"@material-ui/icons/Description\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport CheckpointsPage from \"./Checkpoints\";\nimport ExposuresPage from \"./Exposures\";\nimport ReportPage from \"./Report\";\nimport StatusAlert from \"./StatusAlert\";\nimport API from \"./api\";\nimport { Translation } from \"react-i18next\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport i18n from \"./i18n\";\nimport languageNames from \"./languages\";\nimport logo from \"./img/logo.svg\";\n\nconst oneSecond = 1000;\nconst pollingTime = 30 * oneSecond;\nconst checkpointKeyLength = Number(process.env.REACT_APP_CHECKPOINT_KEY_LENGTH);\nconst adminDomain = process.env.REACT_APP_ADMIN_DOMAIN;\nconst serverDomain = process.env.REACT_APP_SERVER_DOMAIN;\nconst aboutUrl = process.env.REACT_APP_ABOUT_URL;\nconst isUsingLocize = Boolean(process.env.REACT_APP_LOCIZE_PRODUCT_ID);\n\nfunction ListItemLink(props) {\n  return <ListItem button component=\"a\" {...props} />;\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currentTab: \"checkpoints\",\n      status: false,\n      statusLoaded: false,\n      isDrawerOpen: false,\n      currentLanguage: i18n.language,\n      urlScanState: undefined,\n      languages: [],\n    };\n  }\n\n  componentDidMount() {\n    this.checkUrl().then(() => {\n      this.updateStatus();\n      setInterval(this.updateStatus.bind(this), pollingTime);\n    });\n    if (isUsingLocize) {\n      i18n.services.backendConnector.backend.getLanguages((err, data) => {\n        if (err) {\n          console.error(err);\n        } else {\n          const languages = Object.keys(data).map((languageCode) => {\n            return {\n              code: languageCode,\n              name: languageNames[languageCode] || data[languageCode].name,\n            };\n          });\n          const currentLanguage = i18n.language;\n          this.setState({ languages, currentLanguage });\n        }\n      });\n    } else {\n      const languages = [\n        {\n          code: \"en\",\n          name: \"English\",\n        },\n        {\n          code: \"es\",\n          name: \"Espa√±ol\",\n        },\n      ];\n      this.setState({ languages, currentLanguage: i18n.language });\n    }\n  }\n\n  async checkUrl() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const checkpointKey = urlParams.get(\"checkpoint\");\n    if (checkpointKey) {\n      if (checkpointKey.length === checkpointKeyLength) {\n        try {\n          await API.joinCheckpoint(checkpointKey);\n          this.setState({ urlScanState: \"scan-success\" });\n          window.history.replaceState(null, null, window.location.pathname);\n        } catch (e) {\n          console.error(e);\n          this.setState({ urlScanState: \"scan-error\" });\n          window.history.replaceState(null, null, window.location.pathname);\n        }\n      } else {\n        this.setState({ urlScanState: \"scan-error\" });\n        window.history.replaceState(null, null, window.location.pathname);\n      }\n    }\n  }\n\n  async updateStatus() {\n    try {\n      const exposureStatus = await API.getExposureStatus();\n      this.setState({ status: exposureStatus, statusLoaded: true });\n    } catch (e) {\n      console.error(e);\n      this.setState({ status: false, statusLoaded: false });\n    }\n  }\n\n  resetUrlScanState() {\n    this.setState({ urlScanState: undefined });\n  }\n\n  onChangeTab(event, newVal) {\n    this.setState({ currentTab: newVal });\n  }\n\n  openDrawer() {\n    this.setState({ isDrawerOpen: true });\n  }\n\n  closeDrawer() {\n    this.setState({ isDrawerOpen: false });\n  }\n\n  onSelectLanguage(event) {\n    i18n.changeLanguage(event.target.value);\n    this.setState({ currentLanguage: event.target.value });\n  }\n\n  render() {\n    const {\n      currentTab,\n      status,\n      statusLoaded,\n      isDrawerOpen,\n      currentLanguage,\n      urlScanState,\n      languages,\n    } = this.state;\n    const CurrentPage =\n      currentTab === \"checkpoints\"\n        ? CheckpointsPage\n        : currentTab === \"status\"\n        ? ExposuresPage\n        : ReportPage;\n\n    return (\n      <div>\n        <AppBar position=\"static\" color=\"secondary\">\n          <Container maxWidth=\"sm\" style={{ flexGrow: 1 }}>\n            <Toolbar>\n              <IconButton\n                edge=\"start\"\n                color=\"inherit\"\n                aria-label=\"open drawer\"\n                onClick={this.openDrawer.bind(this)}\n              >\n                <img src={logo} width={30} height={30} style={{ width: 30 }} />\n              </IconButton>\n              <Typography\n                variant=\"h6\"\n                component=\"h1\"\n                style={{\n                  flexGrow: 1,\n                  fontFamily: '\"Open Sans\", sans-serif',\n                  fontWeight: \"bold\",\n                }}\n              >\n                {process.env.REACT_APP_NAME}\n              </Typography>\n            </Toolbar>\n          </Container>\n        </AppBar>\n        <Container maxWidth=\"sm\" style={{ marginBottom: 76 }}>\n          <Suspense fallback=\"loading\">\n            <StatusAlert\n              status={status}\n              onExposuresTab={currentTab === \"status\"}\n            />\n            <CurrentPage\n              status={status}\n              statusLoaded={statusLoaded}\n              urlScanState={urlScanState}\n              resetUrlScanState={this.resetUrlScanState.bind(this)}\n            />\n          </Suspense>\n        </Container>\n        <BottomNavigation\n          value={currentTab}\n          style={{\n            width: \"100%\",\n            position: \"fixed\",\n            bottom: 0,\n          }}\n          onChange={this.onChangeTab.bind(this)}\n          showLabels\n        >\n          <BottomNavigationAction\n            label={<Translation>{(t) => t(\"checkpointsTab\")}</Translation>}\n            value=\"checkpoints\"\n            icon={<CropFree />}\n          />\n          <BottomNavigationAction\n            label={<Translation>{(t) => t(\"statusTab\")}</Translation>}\n            value=\"status\"\n            icon={<Face />}\n          />\n          <BottomNavigationAction\n            label={<Translation>{(t) => t(\"reportTab\")}</Translation>}\n            value=\"report\"\n            icon={<ReportIcon />}\n          />\n        </BottomNavigation>\n        <SwipeableDrawer\n          open={isDrawerOpen}\n          onOpen={() => {}}\n          onClose={this.closeDrawer.bind(this)}\n        >\n          <List component=\"nav\" aria-label=\"settings\">\n            <ListItemLink\n              style={{ width: 250 }}\n              href={aboutUrl}\n              target=\"_blank\"\n            >\n              <ListItemIcon>\n                <InfoIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={\n                  <Translation>{(t) => t(\"menuAboutButton\")}</Translation>\n                }\n              />\n            </ListItemLink>\n            <ListItemLink\n              style={{ width: 250 }}\n              href={`${serverDomain}/checkpoint`}\n              target=\"_blank\"\n            >\n              <ListItemIcon>\n                <PinDropIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={\n                  <Translation>{(t) => t(\"menuCheckpointButton\")}</Translation>\n                }\n              />\n            </ListItemLink>\n            <ListItemLink\n              style={{ width: 250 }}\n              href={`${adminDomain}/admin`}\n              target=\"_blank\"\n            >\n              <ListItemIcon>\n                <PersonIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={\n                  <Translation>{(t) => t(\"menuAdminButton\")}</Translation>\n                }\n              />\n            </ListItemLink>\n          </List>\n        </SwipeableDrawer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/home/esteban/Documents/TrackCOVID-community/app2/src/i18n.js",["78"],"import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport Locize from 'i18next-locize-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport en from './translations/en'\nimport es from './translations/es'\n\nconst locizeProductId = process.env['REACT_APP_LOCIZE_PRODUCT_ID']\n\nconst resources = locizeProductId ? undefined : { es }\n\nconst i18nSetup = locizeProductId\n  ? i18n\n    .use(LanguageDetector)\n    .use(initReactI18next) // passes i18n down to react-i18next\n    .use(Locize)\n  : i18n\n    .use(LanguageDetector)\n    .use(initReactI18next) // passes i18n down to react-i18next\n\ni18nSetup.init({\n  resources,\n  backend: {\n    projectId: locizeProductId\n  },\n  load: 'all',\n  fallbackLng: 'es',\n  keySeparator: false, // we do not use keys in form messages.welcome\n  interpolation: {\n    escapeValue: false // react already safes from xss\n  },\n  detection: {\n    order: ['querystring', 'cookie', 'localStorage', 'navigator', 'htmlTag', 'path', 'subdomain'],\n\n    // keys or params to lookup language from\n    lookupQuerystring: 'lng',\n    lookupCookie: 'i18next',\n    lookupLocalStorage: 'i18nextLng',\n    lookupFromPathIndex: 0,\n    lookupFromSubdomainIndex: 0,\n\n    // cache user language on\n    caches: ['localStorage', 'cookie'],\n\n    // optional htmlTag with lang attribute, the default is:\n    htmlTag: document.documentElement\n  }\n})\n\nexport default i18n\n","/home/esteban/Documents/TrackCOVID-community/app2/src/serviceWorkerRegistration.js",[],"/home/esteban/Documents/TrackCOVID-community/app2/src/reportWebVitals.js",[],"/home/esteban/Documents/TrackCOVID-community/app2/src/themes/dark.js",[],"/home/esteban/Documents/TrackCOVID-community/app2/src/themes/light.js",[],"/home/esteban/Documents/TrackCOVID-community/app2/src/Exposures.js",["79"],"import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport { withTheme } from '@material-ui/core/styles'\nimport { Translation } from 'react-i18next'\nimport distanceIcon from './img/keep-distance.png'\nimport stayHomeIcon from './img/stay-home.png'\n\nconst initialState = {\n  exposureStatus: false,\n  loaded: false,\n  mode: 'default'\n}\n\nclass Exposures extends React.Component {\n  constructor () {\n    super()\n    this.state = initialState\n  }\n\n  async reset () {\n    this.setState(initialState)\n  }\n\n  render () {\n    const { status, statusLoaded, theme } = this.props\n    const { mode } = this.state\n    const statusMessageLoading = (<Translation>{t => t('statusLoadingMessage')}</Translation>)\n    const statusMessageNegative = (<Translation>{t => t('statusNegativeMessage')}</Translation>)\n    const statusMessagePositive = (<Translation>{t => t('statusPositiveMessage')}</Translation>)\n    const riskLevelLoading = (<Translation>{t => t('statusLoadingMessage')}</Translation>)\n    const riskLevelNegative = (<Translation>{t => t('standardRiskLevelMessage')}</Translation>)\n    const riskLevelPositive = (<Translation>{t => t('elevatedRiskLevelMessage')}</Translation>)\n    const statusMessage = statusLoaded\n      ? (status\n        ? statusMessagePositive\n        : statusMessageNegative)\n      : statusMessageLoading\n    const riskLevel = statusLoaded\n      ? (status\n        ? riskLevelPositive\n        : riskLevelNegative)\n      : riskLevelLoading\n    const riskLevelColor = status\n      ? 'error'\n      : 'success'\n    const icon = status\n      ? stayHomeIcon\n      : distanceIcon\n    return (\n      <Grid\n        container\n      >\n        {\n          ((mode === 'default') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              <img src={icon} width={200} style={{ maxWidth: '80px', marginTop: 20 }} />\n              <Typography style={{ marginTop: 25 }}>\n                <Translation>{t => t('yourRiskLevelMessage')}</Translation>: <span style={{ color: theme.palette[riskLevelColor].main }}>{riskLevel}</span>\n              </Typography>\n              <Typography style={{ marginTop: 15 }}>\n                {statusMessage}\n              </Typography>\n            </Grid>\n          ))\n        }\n      </Grid>\n    )\n  }\n}\n\nexport default withTheme(Exposures)\n","/home/esteban/Documents/TrackCOVID-community/app2/src/Checkpoints.js",["80","81","82"],"import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport CropFreeIcon from '@material-ui/icons/CropFree'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport { withTheme } from '@material-ui/core/styles'\nimport QRReader from 'react-qr-reader'\nimport { Translation } from 'react-i18next'\nimport Link from '@material-ui/core/Link'\nimport virusIcon from './img/virus-icon.png'\nimport API from './api'\n\nconst checkpointKeyLength = Number(process.env.REACT_APP_CHECKPOINT_KEY_LENGTH)\nconst aboutUrl = process.env.REACT_APP_ABOUT_URL\n\nconst initialState = {\n  mode: 'home',\n  checkpointKey: null,\n  checkpointTime: null,\n  legacyMode: false\n}\n\nclass Checkpoints extends React.Component {\n  constructor () {\n    super()\n    this.state = initialState\n  }\n\n  async reset () {\n    this.setState(initialState)\n    this.props.resetUrlScanState()\n  }\n\n  async joinCheckpoint () {\n    this.setState({\n      mode: 'join'\n    })\n  }\n\n  async handleScan (data) {\n    if (data) {\n      // QR code is a url\n      const urlSplit = data.split('?checkpoint=')\n      if ((urlSplit.length === 2) && (urlSplit[1].length === checkpointKeyLength)) {\n        await API.joinCheckpoint(urlSplit[1])\n        this.setState({ mode: 'scan-success' })\n        setTimeout(() => this.reset(), 10000) // automatically go back to main screen after 10 seconds\n      } else {\n        this.setState({ mode: 'scan-error' })\n      }\n    }\n  }\n\n  handleScanError () {\n    this.setState({ legacyMode: true })\n  }\n\n  openImageDialog () {\n    this.refs.checkpointQR.openImageDialog()\n  }\n\n  render () {\n    const { mode, legacyMode } = this.state\n    const { status, statusLoaded, urlScanState, theme } = this.props\n    const riskLevelLoading = (<Translation>{t => t('statusLoadingMessage')}</Translation>)\n    const riskLevelNegative = (<Translation>{t => t('standardRiskLevelMessage')}</Translation>)\n    const riskLevelPositive = (<Translation>{t => t('elevatedRiskLevelMessage')}</Translation>)\n    const riskLevel = statusLoaded\n      ? (status\n        ? riskLevelPositive\n        : riskLevelNegative)\n      : riskLevelLoading\n    const riskLevelColor = status\n      ? 'error'\n      : 'success'\n    const computedMode = typeof urlScanState !== 'undefined'\n      ? urlScanState\n      : mode\n    let content\n    if (computedMode === 'home') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography variant='h5' style={{ marginTop: 25 }}>\n            <Translation>{t => t('slogan')}</Translation>\n          </Typography>\n          <img src={virusIcon} width={200} style={{ maxWidth: '80px', marginTop: 20 }} />\n          <Typography style={{ marginTop: 25 }}>\n            <Translation>{t => t('welcomeMessage')}</Translation>\n          </Typography>\n          <Button onClick={this.joinCheckpoint.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 35 }}>\n            <CropFreeIcon />\n            <Translation>{t => t('joinCheckpointButton')}</Translation>\n          </Button>\n          <Typography style={{ marginTop: 35, marginBottom: 25 }}>\n            <Translation>\n              {t => t('learnMoreText')}\n            </Translation>\n          </Typography>\n        </Grid>\n      )\n    } else if (computedMode === 'join') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <QRReader\n            ref='checkpointQR'\n            delay={300}\n            onError={this.handleScanError.bind(this)}\n            onScan={this.handleScan.bind(this)}\n            style={{ width: legacyMode ? 0 : '100%' }}\n            facingMode='environment'\n            legacyMode={legacyMode}\n          />\n          { legacyMode && (\n            <Typography style={{ marginTop: 25 }}>\n              <Translation>{t => t('noCameraPermissionMessage')}</Translation>\n            </Typography>\n          ) }\n          <Button onClick={this.openImageDialog.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <Translation>{t => t('takePictureButton')}</Translation>\n          </Button>\n          <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <ArrowBackIcon />\n            <Translation>{t => t('backButton')}</Translation>\n          </Button>\n        </Grid>\n      )\n    } else if (computedMode === 'scan-success') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25 }}>\n            <Translation>{t => t('joinSuccessfulMessage')}</Translation>\n          </Typography>\n          <Typography style={{ marginTop: 15, marginBottom: 25 }}>\n            <Translation>{t => t('yourRiskLevelMessage')}</Translation>: <span style={{ color: theme.palette[riskLevelColor].main }}>{riskLevel}</span>\n          </Typography>\n          <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <ArrowBackIcon />\n            <Translation>{t => t('backButton')}</Translation>\n          </Button>\n        </Grid>\n      )\n    } else if (computedMode === 'scan-error') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            <Translation>{t => t('scanErrorMessage')}</Translation>\n          </Typography>\n          <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <ArrowBackIcon />\n            <Translation>{t => t('backButton')}</Translation>\n          </Button>\n        </Grid>\n      )\n    }\n    return content\n  }\n}\n\nexport default withTheme(Checkpoints)\n","/home/esteban/Documents/TrackCOVID-community/app2/src/Report.js",["83"],"import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport GetAppIcon from '@material-ui/icons/GetApp'\nimport { withTheme } from '@material-ui/core/styles'\nimport { Translation } from 'react-i18next'\nimport reportIcon from './img/report-icon.png'\nimport API from './api'\n\nconst initialState = {\n  exposureStatus: false,\n  loaded: false,\n  mode: 'default'\n}\n\nclass Report extends React.Component {\n  constructor () {\n    super()\n    this.state = initialState\n  }\n\n  async reset () {\n    this.setState(initialState)\n  }\n\n  async downloadHistory () {\n    const checkpoints = await API.exportCheckpoints()\n    var dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(checkpoints))\n    var dlAnchorElem = document.getElementById('downloadAnchorElem')\n    dlAnchorElem.setAttribute('href', dataStr)\n    dlAnchorElem.setAttribute('download', 'checkpoints.json')\n    dlAnchorElem.click()\n  }\n\n  render () {\n    const { mode } = this.state\n    return (\n      <Grid\n        container\n      >\n        {\n          ((mode === 'default') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              <img src={reportIcon} width={200} style={{ maxWidth: '80px', marginTop: 20 }} />\n              <Typography style={{ marginTop: 25 }}>\n                <Translation>{t => t('aboutReportMessage')}</Translation>\n              </Typography>\n              <Button onClick={this.downloadHistory.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n                <GetAppIcon />\n                <Translation>{t => t('downloadHistoryButton')}</Translation>\n              </Button>\n              <a id='downloadAnchorElem' href='/' style={{ display: 'none' }}><Translation>{t => t('downloadHistoryButton')}</Translation></a>\n            </Grid>\n          ))\n        }\n      </Grid>\n    )\n  }\n}\n\nexport default withTheme(Report)\n","/home/esteban/Documents/TrackCOVID-community/app2/src/StatusAlert.js",[],"/home/esteban/Documents/TrackCOVID-community/app2/src/languages.js",[],"/home/esteban/Documents/TrackCOVID-community/app2/src/api.js",["84"],"import TrackCovid from 'trackcovid-js'\n\nconst checkpointsDBKey = 'CHECKPOINTS'\nconst estimatedDiagnosisDelay = Number(process.env.REACT_APP_QUARANTINE_DAYS)\nconst contactWindowBefore = Number(process.env.REACT_APP_CONTACT_WINDOW_HOURS_BEFORE)\nconst contactWindowAfter = Number(process.env.REACT_APP_CONTACT_WINDOW_HOURS_AFTER)\nconst checkpointKeyLength = Number(process.env.REACT_APP_CHECKPOINT_KEY_LENGTH)\nconst serverBaseUrl = `${process.env.REACT_APP_SERVER_DOMAIN}/api/checkpoints`\n\nfunction getCheckpoints () {\n  const localStorage = window.localStorage\n  const checkpointsString = localStorage.getItem(checkpointsDBKey) || '[]'\n  return Promise.resolve(JSON.parse(checkpointsString))\n}\n\nfunction setCheckpoints (checkpointsArr) {\n  const localStorage = window.localStorage\n  return Promise.resolve(localStorage.setItem(checkpointsDBKey, JSON.stringify(checkpointsArr)))\n}\n\nconst trackCovid = TrackCovid({\n  estimatedDiagnosisDelay,\n  getCheckpoints,\n  setCheckpoints,\n  contactWindowBefore,\n  contactWindowAfter,\n  checkpointKeyLength,\n  serverBaseUrl\n})\n\nconst {\n  joinCheckpoint,\n  getExposureStatus,\n  exportCheckpoints\n} = trackCovid\n\nexport default {\n  joinCheckpoint,\n  getExposureStatus,\n  exportCheckpoints\n}\n","/home/esteban/Documents/TrackCOVID-community/app2/src/translations/en.js",[],"/home/esteban/Documents/TrackCOVID-community/app2/src/translations/es.js",["85"],"const appName = process.env.REACT_APP_NAME\n\nmodule.exports = {\n  'translation': {\n    'menuAboutButton': 'Sobre',\n    'menuAdminButton': 'Admin',\n    'menuCheckpointButton': 'Nueva visita',\n    'checkpointsTab': 'Visitas',\n    'statusTab': 'Estado',\n    'reportTab': 'Reporte',\n    'slogan': 'Cu√≠dese y mantenga la trazabilidad.',\n    'welcomeMessage': `Gracias por participar en el esfuerzo para reducir la diseminaci√≥n de COVID-19. Ud. puede escanear una Visita usando el boton debajo.`,\n    'learnMoreText': `Usted puede chequear su Estado de Exposici√≥n en cualquier momento a trav√©s de este sitio web.`,\n    'joinCheckpointButton': 'Registrar visita',\n    'noCameraPermissionMessage': 'Esta app no tiene permiso para acceder a la c√°mara de su tel√©fono. En su lugar, Usted puede tomar una fotograf√≠a del c√≥digo QR.',\n    'takePictureButton': 'Tome una Fotograf√≠a',\n    'backButton': 'Volver',\n    'joinSuccessfulMessage': 'Se ha registrado su visita con √©xito',\n    'scanErrorMessage': 'El c√≥difo QR no pudo ser creado, por favor intente nuevamente.',\n    'statusLoadingMessage': 'Cargando su estado...',\n    'statusNegativeMessage': 'No se encontrado ninguna v√≠a de transmisi√≥n hacia Usted de individuos infectados hasta este momento. Sin embargo, todos estamos en riesgo y debemos seguir cuidandonos.',\n    'statusPositiveMessage': 'Se ha encontrado una posible v√≠a de trasmisi√≥n desde un individuo infectado hacia Ud. Debe tomar las medidas de precauci√≥n necesarias para protegerse y proteger a otros.',\n    'loadingMessage': 'Cargando...',\n    'standardRiskLevelMessage': 'Estandard',\n    'elevatedRiskLevelMessage': 'Elevado',\n    'yourRiskLevelMessage': 'Su Nivel de Riesgo',\n    'aboutReportMessage': 'En el caso de que Usted tenga un resultado Positivo en un test de Covid-19, tiene la oportunidad de proteger a otros an√≥nimamente compartiendo su historial de Visitas.',\n    'downloadHistoryButton': 'Descargar Visitas',\n    'elevatedRiskAlertMessage': 'Su nivel de Riesgo es Elevado.',\n    'seeStatusTabMessage': 'Mire la Barra de Estado.'\n  }\n}\n",{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":26,"column":8,"nodeType":"92","messageId":"93","endLine":26,"endColumn":16},{"ruleId":"90","severity":1,"message":"94","line":27,"column":8,"nodeType":"92","messageId":"93","endLine":27,"endColumn":19},{"ruleId":"90","severity":1,"message":"95","line":28,"column":8,"nodeType":"92","messageId":"93","endLine":28,"endColumn":14},{"ruleId":"90","severity":1,"message":"96","line":152,"column":7,"nodeType":"92","messageId":"93","endLine":152,"endColumn":22},{"ruleId":"90","severity":1,"message":"97","line":154,"column":7,"nodeType":"92","messageId":"93","endLine":154,"endColumn":16},{"ruleId":"98","severity":1,"message":"99","line":174,"column":17,"nodeType":"100","endLine":174,"endColumn":80},{"ruleId":"90","severity":1,"message":"101","line":5,"column":8,"nodeType":"92","messageId":"93","endLine":5,"endColumn":10},{"ruleId":"98","severity":1,"message":"99","line":62,"column":15,"nodeType":"100","endLine":62,"endColumn":89},{"ruleId":"90","severity":1,"message":"102","line":10,"column":8,"nodeType":"92","messageId":"93","endLine":10,"endColumn":12},{"ruleId":"90","severity":1,"message":"103","line":15,"column":7,"nodeType":"92","messageId":"93","endLine":15,"endColumn":15},{"ruleId":"98","severity":1,"message":"99","line":92,"column":11,"nodeType":"100","endLine":92,"endColumn":90},{"ruleId":"98","severity":1,"message":"99","line":50,"column":15,"nodeType":"100","endLine":50,"endColumn":95},{"ruleId":"104","severity":1,"message":"105","line":37,"column":1,"nodeType":"106","endLine":41,"endColumn":2},{"ruleId":"90","severity":1,"message":"107","line":1,"column":7,"nodeType":"92","messageId":"93","endLine":1,"endColumn":14},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'MenuItem' is defined but never used.","Identifier","unusedVar","'FormControl' is defined but never used.","'Select' is defined but never used.","'currentLanguage' is assigned a value but never used.","'languages' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'en' is defined but never used.","'Link' is defined but never used.","'aboutUrl' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'appName' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]