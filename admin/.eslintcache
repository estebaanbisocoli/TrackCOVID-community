[{"/home/esteban/Documents/TrackCOVID-community/admin/src/index.js":"1","/home/esteban/Documents/TrackCOVID-community/admin/src/i18n.js":"2","/home/esteban/Documents/TrackCOVID-community/admin/src/App.js":"3","/home/esteban/Documents/TrackCOVID-community/admin/src/translations/en.js":"4","/home/esteban/Documents/TrackCOVID-community/admin/src/helpers/api.js":"5","/home/esteban/Documents/TrackCOVID-community/admin/src/components/ForgotPassword.js":"6","/home/esteban/Documents/TrackCOVID-community/admin/src/components/ResetPassword.js":"7","/home/esteban/Documents/TrackCOVID-community/admin/src/components/Login.js":"8","/home/esteban/Documents/TrackCOVID-community/admin/src/components/Checkpoints.js":"9","/home/esteban/Documents/TrackCOVID-community/admin/src/components/Users.js":"10","/home/esteban/Documents/TrackCOVID-community/admin/src/components/CreateCheckpoint.js":"11","/home/esteban/Documents/TrackCOVID-community/admin/src/components/Reports.js":"12","/home/esteban/Documents/TrackCOVID-community/admin/src/components/Account.js":"13","/home/esteban/Documents/TrackCOVID-community/admin/src/helpers/json.js":"14"},{"size":259,"mtime":1609365703804,"results":"15","hashOfConfig":"16"},{"size":1398,"mtime":1609365703804,"results":"17","hashOfConfig":"16"},{"size":7048,"mtime":1609365703804,"results":"18","hashOfConfig":"16"},{"size":4509,"mtime":1609365703804,"results":"19","hashOfConfig":"16"},{"size":3858,"mtime":1609365703804,"results":"20","hashOfConfig":"16"},{"size":1406,"mtime":1609365703804,"results":"21","hashOfConfig":"16"},{"size":1516,"mtime":1609365703804,"results":"22","hashOfConfig":"16"},{"size":1965,"mtime":1609365703804,"results":"23","hashOfConfig":"16"},{"size":2517,"mtime":1609365703804,"results":"24","hashOfConfig":"16"},{"size":8405,"mtime":1609365703804,"results":"25","hashOfConfig":"16"},{"size":6683,"mtime":1609365703804,"results":"26","hashOfConfig":"16"},{"size":4558,"mtime":1609365703804,"results":"27","hashOfConfig":"16"},{"size":3264,"mtime":1609365703804,"results":"28","hashOfConfig":"16"},{"size":117,"mtime":1609365703804,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1mynuxz",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"32"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/esteban/Documents/TrackCOVID-community/admin/src/index.js",[],["69","70"],"/home/esteban/Documents/TrackCOVID-community/admin/src/i18n.js",[],"/home/esteban/Documents/TrackCOVID-community/admin/src/App.js",["71","72"],"/* globals alert */\nimport React, { useEffect, useState } from 'react'\nimport { BrowserRouter as Router, Route, NavLink, Redirect, withRouter } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\nimport { useTranslation } from 'react-i18next'\nimport './App.css'\nimport { fetchCurrentUser } from './helpers/api'\nimport { Login } from './components/Login'\nimport { ForgotPassword } from './components/ForgotPassword'\nimport { ResetPassword } from './components/ResetPassword'\nimport { Checkpoints } from './components/Checkpoints'\nimport { CreateCheckpoint } from './components/CreateCheckpoint'\nimport { Reports } from './components/Reports'\nimport { Users } from './components/Users'\nimport { Account } from './components/Account'\n\nconst ViewEnum = {\n  checkpoints: '/dashboard/checkpoints/upload',\n  users: '/dashboard/users',\n  account: '/dashboard/account',\n  createCheckpoint: '/dashboard/checkpoints/new',\n  reports: '/dashboard/reports',\n  login: '/login',\n  forgotPassword: '/forgot-password',\n  resetPassword: '/reset-password'\n}\n\nconst serverUrl = process.env.REACT_APP_SERVER_DOMAIN\nconst basename = '/admin'\n\nfunction AppContainer ({ history }) {\n  const [isLoggedIn, setIsLoggedIn] = useState(undefined)\n  const [currentUser, setCurrentUser] = useState({})\n  const canUploadCheckpoints = currentUser && Boolean(currentUser.canUploadCheckpoints)\n  const canCreateCheckpoints = currentUser && Boolean(currentUser.canCreateCheckpoints)\n  const canManageUsers = currentUser && Boolean(currentUser.canManageUsers)\n  const canAccessReports = currentUser && Boolean(currentUser.canAccessReports)\n  const { t } = useTranslation()\n\n  const loadCurrentUser = async () => {\n    const user = await fetchCurrentUser()\n    if (typeof user !== 'undefined') {\n      if (!history.location.pathname.includes('/dashboard')) {\n        history.push(getDefaultRoute(true, user))\n      }\n      setIsLoggedIn(true)\n      setCurrentUser(user)\n    } else {\n      if (history.location.pathname.includes('/dashboard')) {\n        history.push(getDefaultRoute(false, user))\n      }\n      setIsLoggedIn(false)\n    }\n  }\n\n  useEffect(() => {\n    if (typeof isLoggedIn === 'undefined') {\n      loadCurrentUser()\n    }\n  }, [isLoggedIn])\n\n  const getDefaultRoute = (isLoggedIn, user) => {\n    return isLoggedIn\n      ? user.canUploadCheckpoints\n        ? ViewEnum.checkpoints\n        : user.canCreateCheckpoints\n          ? ViewEnum.createCheckpoint\n          : user.canManageUsers\n            ? ViewEnum.users\n            : user.canAccessReports\n              ? ViewEnum.reports\n              : ViewEnum.account\n      : ViewEnum.login\n  }\n\n  const onSubmitLogin = async (loginSuccessful) => {\n    if (loginSuccessful) {\n      loadCurrentUser()\n    } else {\n      alert('Login failed')\n    }\n  }\n\n  const renderContext = (ChildComponent) => {\n    return (\n      isLoggedIn\n        ? (\n          <div className='App'>\n            <nav className='navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow'>\n              <a className='navbar-brand col-sm-3 col-md-2 mr-0' href='/admin'>{process.env.REACT_APP_NAME} {t('admin')}</a>\n              <div className='text-light'>{t('welcome')}: {currentUser.username}</div>\n              <ul className='navbar-nav px-3'>\n                <li className='nav-item text-nowrap'>\n                  <a className='nav-link' href={`${serverUrl}/admin/logout`}>{t('logout_button')}</a>\n                </li>\n              </ul>\n            </nav>\n\n            <div className='container-fluid'>\n              <div className='row'>\n                <nav className='col-md-2 d-none d-md-block bg-light sidebar'>\n                  <div className='sidebar-sticky'>\n                    <ul className='nav flex-column'>\n                      {canUploadCheckpoints && (\n                        <li className='nav-item'>\n                          <NavLink className='nav-link' activeClassName='nav-link active' to={ViewEnum.checkpoints}>\n                            {t('menu_checkpoints')}\n                          </NavLink>\n                        </li>\n                      )}\n                      {canCreateCheckpoints && (\n                        <li className='nav-item'>\n                          <NavLink className='nav-link' activeClassName='active' to={ViewEnum.createCheckpoint}>\n                            {t('menu_checkpoint_pdf')}\n                          </NavLink>\n                        </li>\n                      )}\n                      {canAccessReports && (\n                        <li className='nav-item'>\n                          <NavLink className='nav-link' activeClassName='active' to={ViewEnum.reports}>\n                            {t('menu_reports')}\n                          </NavLink>\n                        </li>\n                      )}\n                      {canManageUsers && (\n                        <li className='nav-item'>\n                          <NavLink className='nav-link' activeClassName='active' to={ViewEnum.users}>\n                            {t('menu_users')}\n                          </NavLink>\n                        </li>\n                      )}\n                      <li className='nav-item'>\n                        <NavLink className='nav-link' activeClassName='active' to={ViewEnum.account}>\n                          {t('menu_account')}\n                        </NavLink>\n                      </li>\n                    </ul>\n                  </div>\n                </nav>\n\n                <main role='main' className='col-md-9 ml-sm-auto col-lg-10 px-4'>\n                  <ChildComponent />\n                </main>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className='login-container bg-dark text-center text-light'>\n            <ChildComponent />\n          </div>\n        )\n    )\n  }\n\n  return (\n    <div>\n      <Route path={ViewEnum.login} component={() => renderContext(() => <Login onLoginRequest={onSubmitLogin} />)} />\n      <Route path={ViewEnum.forgotPassword} component={() => renderContext(ForgotPassword)} />\n      <Route path={ViewEnum.resetPassword} component={() => renderContext(ResetPassword)} />\n      <Route path={ViewEnum.checkpoints} component={() => renderContext(Checkpoints)} />\n      <Route path={ViewEnum.createCheckpoint} component={() => renderContext(CreateCheckpoint)} />\n      <Route path={ViewEnum.reports} component={() => renderContext(Reports)} />\n      <Route path={ViewEnum.users} component={() => renderContext(() => <Users currentUser={currentUser} />)} />\n      <Route path={ViewEnum.account} component={() => renderContext(Account)} />\n      { ((history.location.pathname === '/') || (history.location.pathname === '/admin')) && (\n        <Redirect from='/' to={getDefaultRoute()} />\n      )}\n    </div>\n  )\n}\n\nfunction App () {\n  const history = createBrowserHistory()\n  const AppContainerWithRouter = withRouter(AppContainer)\n  return (\n    <Router basename={basename}>\n      <AppContainerWithRouter history={history} />\n    </Router>\n  )\n}\n\nexport default App\n","/home/esteban/Documents/TrackCOVID-community/admin/src/translations/en.js",[],"/home/esteban/Documents/TrackCOVID-community/admin/src/helpers/api.js",["73"],"/* globals fetch */\n\nconst serverBaseUrl = `${process.env.REACT_APP_SERVER_DOMAIN}`\nconst locizeProductId = process.env['REACT_APP_LOCIZE_PRODUCT_ID']\n\nconst sendExternalRequest = async (url, method = 'GET', body) => {\n  const res = await fetch(`${url}`, {\n    method,\n    body: body ? JSON.stringify(body) : undefined,\n    headers: { 'Content-Type': 'application/json', 'authorization': undefined }\n  })\n  return res.json()\n}\n\nconst sendRequest = async (url, method = 'GET', body) => {\n  const res = await fetch(`${serverBaseUrl}${url}`, {\n    method,\n    body: body ? JSON.stringify(body) : undefined,\n    headers: { 'Content-Type': 'application/json' },\n    credentials: 'include'\n  })\n  return res.json()\n}\n\nexport const login = async (username, password) => {\n  const res = await sendRequest('/admin/login', 'POST', { username, password })\n  return res && res.isLoggedIn\n}\n\nexport const fetchCurrentUser = async () => {\n  const res = await sendRequest('/admin/api/status')\n  return (res && res.isLoggedIn) ? res.user : undefined\n}\n\nexport const fetchUsers = async () => {\n  const res = await sendRequest('/admin/api/users')\n  return (res && res.users) ? res.users : undefined\n}\n\nexport const createUser = async ({ username, canUploadCheckpoints, canCreateCheckpoints, canManageUsers, canAccessReports }) => {\n  const res = await sendRequest(\n    '/admin/api/users',\n    'POST',\n    { username, canUploadCheckpoints, canCreateCheckpoints, canManageUsers, canAccessReports }\n  )\n  return res && !res.error ? res.user : undefined\n}\n\nexport const resetPasswordRequest = async ({ username }) => {\n  const res = await sendRequest(\n    '/admin/api/users/reset-password-request',\n    'POST',\n    { username }\n  )\n  return res && !res.error\n}\n\nexport const resetPassword = async ({ token, newPassword }) => {\n  const res = await sendRequest(\n    '/admin/api/users/reset-password',\n    'POST',\n    { token, newPassword }\n  )\n  return res && !res.error\n}\n\nexport const updateUser = async ({ userId, canUploadCheckpoints, canCreateCheckpoints, canManageUsers, canAccessReports }) => {\n  const res = await sendRequest(\n    `/admin/api/users/${userId}`,\n    'PUT',\n    { canUploadCheckpoints, canCreateCheckpoints, canManageUsers, canAccessReports }\n  )\n  return res && !res.error\n}\n\nexport const updateUsername = async ({ username }) => {\n  const res = await sendRequest(\n    '/admin/api/account',\n    'PUT',\n    { username }\n  )\n  return res && !res.error\n}\n\nexport const updatePassword = async (currentPassword, newPassword) => {\n  const res = await sendRequest(\n    '/admin/api/account',\n    'PUT',\n    { currentPassword, newPassword }\n  )\n  return res && !res.error\n}\n\nexport const deleteUser = async (userId) => {\n  const res = await sendRequest(`/admin/api/users/${userId}`, 'DELETE')\n  return res && !res.error\n}\n\nexport const postCheckpoints = async (checkpoints, symptomStartTime) => {\n  const res = await sendRequest(\n    '/admin/api/checkpoints',\n    'POST',\n    { checkpoints, symptomStartTime }\n  )\n  return res && !res.error\n}\n\nexport const postLocation = async ({ latitude, longitude, country, locale, name, phone, email }) => {\n  const res = await sendRequest(\n    '/admin/api/location',\n    'POST',\n    { latitude, longitude, country, locale, name, phone, email }\n  )\n  return res && !res.error && res.checkpointKey\n}\n\nexport const fetchCheckpointLocations = async () => {\n  const res = await sendRequest('/admin/api/checkpoints/locations')\n  return (res && res.checkpoints) ? res.checkpoints : undefined\n}\n\nexport const fetchLanguages = async () => {\n  const res = await sendExternalRequest(`https://api.locize.app/languages/${locizeProductId}`)\n  return res\n}\n\nexport const fetchTranslations = async (language) => {\n  const res = await sendExternalRequest(`https://api.locize.app/${locizeProductId}/latest/${language}/translation`)\n  return res\n}\n","/home/esteban/Documents/TrackCOVID-community/admin/src/components/ForgotPassword.js",["74"],"/* globals alert */\nimport React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\nimport { resetPasswordRequest } from '../helpers/api'\n\nexport function ForgotPassword () {\n  const [username, setUsername] = useState('')\n  const { t } = useTranslation()\n\n  const onSubmit = async (event) => {\n    event.preventDefault()\n    const resetSuccessful = await resetPasswordRequest({ username })\n    if (resetSuccessful) {\n      alert(t('reset_password_request_success'))\n    } else {\n      alert(t('reset_password_request_fail'))\n    }\n  }\n\n  const onchangeUsername = (event) => {\n    setUsername(event.target.value)\n  }\n\n  return (\n    <form class='form-signin' onSubmit={onSubmit}>\n      <h1 class='h3 mb-3 font-weight-normal'>{t('reset_password_request_title')}</h1>\n      <label for='email' class='sr-only'>{t('login_username')}:</label><br />\n      <input value={username} onChange={onchangeUsername} type='email' id='email' name='email' placeholder={t('login_username')} class='form-control' /><br />\n      <button class='btn btn-lg btn-warning btn-block' type='submit'>{t('reset_password_request_submit')}</button>\n      <p class='mt-5 mb-3 text-muted'>{process.env.REACT_APP_NAME} {t('admin')}</p>\n      <p class='mt-5'>\n        <Link class='link text-warning' to={'/login'}>{t('reset_password_cancel')}</Link>\n      </p>\n    </form>\n  )\n}\n","/home/esteban/Documents/TrackCOVID-community/admin/src/components/ResetPassword.js",["75"],"/* globals alert */\nimport React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\nimport { resetPassword } from '../helpers/api'\n\nexport function ResetPassword () {\n  const [newPassword, setNewPassword] = useState('')\n  const { t } = useTranslation()\n\n  const onSubmit = async (event) => {\n    event.preventDefault()\n    const urlParams = new URLSearchParams(window.location.search)\n    const token = urlParams.get('token')\n    const resetSuccessful = await resetPassword({ newPassword, token })\n    if (resetSuccessful) {\n      alert(t('reset_password_success'))\n    } else {\n      alert(t('reset_password_fail'))\n    }\n  }\n\n  const onchangePassword = (event) => {\n    setNewPassword(event.target.value)\n  }\n\n  return (\n    <form class='form-signin' onSubmit={onSubmit}>\n      <h1 class='h3 mb-3 font-weight-normal'>{t('reset_password_title')}</h1>\n      <label htmlFor='password' class='sr-only'>{t('account_new_password')}:</label><br />\n      <input value={newPassword} onChange={onchangePassword} type='password' id='password' name='password' placeholder={t('account_new_password')} class='form-control' /><br />\n      <button class='btn btn-lg btn-warning btn-block' type='submit'>{t('reset_password_submit')}</button>\n      <p class='mt-5 mb-3 text-muted'>{process.env.REACT_APP_NAME} {t('admin')}</p>\n      <p class='mt-5'>\n        <Link class='link text-warning' to={'/login'}>{t('reset_password_cancel')}</Link>\n      </p>\n    </form>\n  )\n}\n","/home/esteban/Documents/TrackCOVID-community/admin/src/components/Login.js",["76"],"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\nimport { login } from '../helpers/api'\n\nexport function Login ({ onLoginRequest }) {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const { t } = useTranslation()\n\n  const onSubmitLogin = async (event) => {\n    event.preventDefault()\n    const loginSuccessful = await login(username, password)\n    onLoginRequest(loginSuccessful)\n  }\n\n  const onchangeUsername = (event) => {\n    setUsername(event.target.value)\n  }\n\n  const onchangePassword = (event) => {\n    setPassword(event.target.value)\n  }\n\n  return (\n    <form className='form-signin' onSubmit={onSubmitLogin}>\n      <h1 className='h3 mb-3 font-weight-normal'>{t('login_title')}</h1>\n      <label htmlFor='email' className='sr-only'>{t('login_username')}:</label><br />\n      <input value={username} onChange={onchangeUsername} type='email' id='email' name='email' placeholder={t('login_username')} className='form-control' /><br />\n      <label htmlFor='password' className='sr-only'>{t('login_password')}:</label><br />\n      <input value={password} onChange={onchangePassword} type='password' id='password' name='password' placeholder={t('login_password')} className='form-control' /><br /><br />\n      <button className='btn btn-lg btn-warning btn-block' type='submit'>{t('login_submit_button')}</button>\n      <p className='mt-5'>\n        <Link className='link text-warning' to={'/forgot-password'}>{t('login_forgot_password')}</Link>\n      </p>\n      {process.env.REACT_APP_REGISTRATION_URL && (\n        <p className='mt-2 mb-3 text-muted'>\n          {t('login_no_account_1')} <a href={process.env.REACT_APP_REGISTRATION_URL} target='_blank' className='text-warning'>{t('login_no_account_2')}</a>.\n        </p>\n      )}\n      <p className='mt-5 mb-3 text-muted'>{process.env.REACT_APP_NAME} {t('admin')}</p>\n    </form>\n  )\n}\n","/home/esteban/Documents/TrackCOVID-community/admin/src/components/Checkpoints.js",["77","78"],"/* globals alert, FileReader */\nimport React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { postCheckpoints } from '../helpers/api'\nimport { isValidJSON } from '../helpers/json'\n\nconst oneHour = 1000 * 60 * 60\nconst oneDay = oneHour * 24\nconst twoDays = 2 * oneDay\n\nexport function Checkpoints ({ onUpload }) {\n  const [symptomStart, setSymptomStart] = useState('')\n  const { t } = useTranslation()\n  const webAppUrl = process.env.REACT_APP_WEB_APP_DOMAIN\n\n  const handleUpload = () => {\n    const files = document.getElementById('checkpoint-upload').files\n    if (files.length <= 0) {\n      return false\n    }\n    const fr = new FileReader()\n    fr.onload = async (e) => {\n      if (e && e.target.result && isValidJSON(e.target.result)) {\n        const checkpointsJSON = JSON.parse(e.target.result)\n        const symptomStartDate = new Date(symptomStart)\n        symptomStartDate.setHours(24, 0, 0, 0)\n        const recentCheckpoints = checkpointsJSON.filter(checkpoint => {\n          return checkpoint.timestamp >= (symptomStartDate.getTime() - twoDays)\n        })\n        const uploadSuccess = await postCheckpoints(recentCheckpoints, symptomStartDate.getTime())\n        if (uploadSuccess) {\n          alert(t('upload_success'))\n        } else {\n          alert(t('upload_fail'))\n        }\n        document.getElementById('checkpoint-upload-form').reset()\n      } else {\n        alert(t('upload_fail'))\n      }\n    }\n    fr.readAsText(files.item(0))\n  }\n\n  const handleChangeSymptomStart = (e) => {\n    setSymptomStart(e.target.value)\n  }\n\n  return (\n    <div>\n      <div className='d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom'>\n        <h1 className='h2'>{t('upload_title')}</h1>\n      </div>\n      <form id='checkpoint-upload-form'>\n        <p>{t('upload_instructions_1')} {webAppUrl}. {t('upload_instructions_2')}</p>\n        <p>{t('upload_instructions_3')}</p>\n        <div className='alert alert-success' style={{ display: 'none' }} id='upload-success' role='alert'>\n          {t('upload_success')}\n        </div>\n        <span className='mr-2'>{t('upload_instructions_date')}:</span>\n        <input className='mb-2' type='date' id='start' name='symptom-start' value={symptomStart} onChange={handleChangeSymptomStart} />\n        <br />\n        <input className='btn btn-large btn-warning' type='file' id='checkpoint-upload' disabled={symptomStart === ''} onChange={handleUpload} />\n      </form>\n    </div>\n  )\n}\n","/home/esteban/Documents/TrackCOVID-community/admin/src/components/Users.js",["79","80","81","82"],"/* globals alert */\nimport React, { useEffect, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { fetchUsers, createUser, deleteUser, updateUser } from '../helpers/api'\n\nconst ViewEnum = {\n  list: 1,\n  new: 2\n}\n\nexport function Users ({ currentUser }) {\n  const [users, setUsers] = useState(undefined)\n  const [view, setView] = useState(ViewEnum.list)\n  const [newUsername, setNewUsername] = useState('')\n  const [newCanUpload, setNewCanUpload] = useState(true)\n  const [newCanCreate, setNewCanCreate] = useState(false)\n  const [newCanManage, setNewCanManage] = useState(false)\n  const [newCanAccessReports, setNewCanAccessReports] = useState(false)\n  const [createdUsername, setCreatedUsername] = useState('')\n  const { t } = useTranslation()\n  const usersList = users || []\n\n  const loadUsers = async () => {\n    const users = await fetchUsers()\n    if (typeof users !== 'undefined') {\n      setUsers(users)\n    }\n  }\n\n  useEffect(() => {\n    if (typeof users === 'undefined') {\n      loadUsers()\n    }\n  })\n\n  const onSubmitNewUser = async (event) => {\n    event.preventDefault()\n    const usernameRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    if (usernameRegex.test(String(newUsername).toLowerCase())) {\n      const createdUser = await createUser({\n        username: newUsername,\n        canUploadCheckpoints: newCanUpload,\n        canCreateCheckpoints: newCanCreate,\n        canManageUsers: newCanManage,\n        canAccessReports: newCanAccessReports\n      })\n      if (typeof createdUser === 'undefined') {\n        alert(t('user_create_fail'))\n      } else {\n        setCreatedUsername(createdUser.username)\n        setView(ViewEnum.created)\n        loadUsers()\n      }\n      setNewUsername('')\n      setNewCanManage(false)\n    } else {\n      alert(t('user_create_invalid_username'))\n    }\n  }\n\n  const onchangeUsername = (event) => {\n    setNewUsername(event.target.value)\n  }\n\n  const onchangeNewCanUpload = () => {\n    setNewCanUpload(!newCanUpload)\n  }\n  const onchangeNewCanCreate = () => {\n    setNewCanCreate(!newCanCreate)\n  }\n  const onchangeNewCanManage = () => {\n    setNewCanManage(!newCanManage)\n  }\n  const onchangeNewCanAccessReports = () => {\n    setNewCanAccessReports(!newCanAccessReports)\n  }\n  const onEditUser = async (user, prop) => {\n    const newUser = {\n      userId: user.id,\n      canUploadCheckpoints: user.canUploadCheckpoints,\n      canCreateCheckpoints: user.canCreateCheckpoints,\n      canManageUsers: user.canManageUsers,\n      canAccessReports: user.canAccessReports\n    }\n    newUser[prop] = !user[prop]\n    if (await updateUser(newUser)) {\n      loadUsers()\n    } else {\n      alert('Oops, something went wrong.')\n    }\n  }\n\n  const handleDelete = async (userId, username) => {\n    if (window.confirm(`${t('user_delete_confirm')}: ${username}?`)) {\n      const deletedUserSuccessfully = await deleteUser(userId)\n      if (deletedUserSuccessfully) {\n        loadUsers()\n      } else {\n        alert(t('user_delete_fail'))\n      }\n    }\n  }\n\n  return (\n    <div>\n      <div class='d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom'>\n        <h1 class='h2'>Users</h1>\n      </div>\n      {view === ViewEnum.list && (\n        <div>\n          <a class='btn btn-dark text-light mb-2' onClick={() => setView(ViewEnum.new)}>\n            New user\n          </a>\n          <table class='table mt-3'>\n            <thead>\n              <tr>\n                <th scope='col'>{t('login_username')}</th>\n                <th scope='col'>{t('user_create_can_upload_checkpoints')}</th>\n                <th scope='col'>{t('user_create_can_create_checkpoints')}</th>\n                <th scope='col'>{t('user_create_can_manage_users')}</th>\n                <th scope='col'>{t('user_create_can_access_reports')}</th>\n                <th scope='col' />\n              </tr>\n            </thead>\n            <tbody>\n              {usersList.map((user, userIndex) => {\n                const canEdit = user.id !== currentUser.id\n                return (\n                  <tr key={userIndex}>\n                    <td>{user.username}</td>\n                    <td>\n                      {canEdit && (\n                        <div class='form-check'>\n                          <input class='form-check-input' type='checkbox' checked={user.canUploadCheckpoints} onChange={() => onEditUser(user, 'canUploadCheckpoints')} />\n                        </div>\n                      )}\n                    </td>\n                    <td>\n                      {canEdit && (\n                        <div class='form-check'>\n                          <input class='form-check-input' type='checkbox' checked={user.canCreateCheckpoints} onChange={() => onEditUser(user, 'canCreateCheckpoints')} />\n                        </div>\n                      )}\n                    </td>\n                    <td>\n                      {canEdit && (\n                        <div class='form-check'>\n                          <input class='form-check-input' type='checkbox' checked={user.canManageUsers} onChange={() => onEditUser(user, 'canManageUsers')} />\n                        </div>\n                      )}\n                    </td>\n                    <td>\n                      {canEdit && (\n                        <div class='form-check'>\n                          <input class='form-check-input' type='checkbox' checked={user.canAccessReports} onChange={() => onEditUser(user, 'canAccessReports')} />\n                        </div>\n                      )}\n                    </td>\n                    <td>\n                      {canEdit && (\n                        <a onClick={() => handleDelete(user.id, user.username)} class='btn btn-danger text-light user-delete'>\n                          {t('user_delete_button')}\n                        </a>\n                      )}\n                    </td>\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        </div>\n      )}\n      {view === ViewEnum.new && (\n        <form class='form-signin' onSubmit={onSubmitNewUser}>\n          <h2 class='h3 mb-3 font-weight-normal'>{t('user_create_title')}</h2>\n          <label for='email' class='sr-only'>{t('user_create_username')}:</label>\n          <input value={newUsername} onChange={onchangeUsername} type='email' id='email' name='email' placeholder={t('user_create_username')} class='form-control mb-3' />\n          <div class='form-check'>\n            <input checked={newCanUpload} onChange={onchangeNewCanUpload} class='form-check-input' type='checkbox' id='can-upload' />\n            <label class='form-check-label' for='can-upload'>\n              {t('user_create_can_upload_checkpoints')}\n            </label>\n          </div>\n          <div class='form-check'>\n            <input checked={newCanCreate} onChange={onchangeNewCanCreate} class='form-check-input' type='checkbox' id='can-create' />\n            <label class='form-check-label' for='can-create'>\n              {t('user_create_can_create_checkpoints')}\n            </label>\n          </div>\n          <div class='form-check'>\n            <input checked={newCanManage} onChange={onchangeNewCanManage} class='form-check-input' type='checkbox' id='can-manage' />\n            <label class='form-check-label' for='can-manage'>\n              {t('user_create_can_manage_users')}\n            </label>\n          </div>\n          <div class='form-check'>\n            <input checked={newCanAccessReports} onChange={onchangeNewCanAccessReports} class='form-check-input' type='checkbox' id='can-access-reports' />\n            <label class='form-check-label' for='can-access-reports'>\n              {t('user_create_can_access_reports')}\n            </label>\n          </div>\n          <button class='btn btn-lg btn-warning btn-block mt-3' type='submit'>{t('user_create_submit')}</button>\n        </form>\n      )}\n      {view === ViewEnum.created && (\n        <div>\n          <p class='mb-3 font-weight-normal'>{t('user_create_success')}</p>\n          <p>{t('user_create_username')}: <strong>{createdUsername}</strong></p>\n          <a class='btn btn-dark text-light mt-2' onClick={() => setView(ViewEnum.list)}>\n            {t('user_create_exit')}\n          </a>\n        </div>\n      )}\n    </div>\n  )\n}\n","/home/esteban/Documents/TrackCOVID-community/admin/src/components/CreateCheckpoint.js",["83","84"],"/* globals */\nimport React, { useState, useEffect } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { postLocation, fetchLanguages, fetchTranslations } from '../helpers/api'\n\nconst serverUrl = process.env.REACT_APP_SERVER_DOMAIN\nconst isUsingLocize = Boolean(process.env.REACT_APP_LOCIZE_PRODUCT_ID)\n\nexport function CreateCheckpoint () {\n  const [name, setName] = useState('')\n  const [phone, setPhone] = useState('')\n  const [email, setEmail] = useState('')\n  const [map, setMap] = useState(null)\n  const [autocomplete, setAutocomplete] = useState(null)\n  const [latitude, setLatitude] = useState(null)\n  const [longitude, setLongitude] = useState(null)\n  const [pdfTranslations, setPdfTranslations] = useState([])\n  const [pdfTranslation, setPdfTranslation] = useState('')\n  const { t } = useTranslation()\n\n  const languageNames = {}\n\n  useEffect(() => {\n    if (!map) {\n      const myOptions = {\n        zoom: 3,\n        center: new window.google.maps.LatLng(37.09024, -95.712891),\n        mapTypeControl: false,\n        navigationControl: false,\n        mapTypeId: window.google.maps.MapTypeId.ROADMAP\n      }\n      const newMap = new window.google.maps.Map(document.getElementById('map-canvas'), myOptions)\n      setMap(newMap)\n    }\n    if (map && !autocomplete) {\n      const input = document.getElementById('search-text-field')\n      const newAutocomplete = new window.google.maps.places.Autocomplete(input)\n      setAutocomplete(newAutocomplete)\n      window.google.maps.event.addListener(newAutocomplete, 'place_changed', function () {\n        const place = newAutocomplete.getPlace()\n        const newLat = place.geometry.location.lat()\n        const newLong = place.geometry.location.lng()\n        setLatitude(newLat)\n        setLongitude(newLong)\n        setMapLocation(newLat, newLong)\n      })\n    }\n    if (isUsingLocize && pdfTranslations.length === 0) {\n      fetchLanguages().then(async languages => {\n        const newPDFTranslations = await Promise.all(Object.keys(languages).map(code => {\n          return new Promise(async resolve => {\n            const translations = await fetchTranslations(code)\n            if (translations['pdfTitle']) {\n              resolve({\n                languageCode: code,\n                languageName: languageNames[code] || languages[code].name,\n                altTitle: translations['pdfTitle'],\n                altHelp: translations['pdfHelp']\n              })\n            } else {\n              resolve(null)\n            }\n          })\n        }))\n        setPdfTranslations(newPDFTranslations.filter(t => {\n          return (t !== null) && (t.languageCode !== 'en')\n        }))\n      })\n    }\n  }, [map, autocomplete, languageNames, pdfTranslations])\n\n  function setMapLocation (lat, lng) {\n    if (lat !== null && lng !== null) {\n      map.setCenter({ lat, lng })\n      map.setZoom(16)\n    }\n  }\n\n  const onSubmitCreateCheckpoint = async (event) => {\n    const checkpointKey = await postLocation({ latitude, longitude, name, phone, email })\n    let queryString = ''\n    if (pdfTranslation !== '') {\n      const translationObject = pdfTranslations.find(t => t.languageCode === pdfTranslation)\n      queryString = `?altTitle=${translationObject.altTitle}&altHelp=${translationObject.altHelp}`\n    }\n    window.location.href = `${serverUrl}/admin/generate/${checkpointKey}/checkpoint.pdf${queryString}`\n  }\n\n  const onchangeLat = (event) => {\n    const newLat = Number(event.target.value)\n    setLatitude(newLat)\n    setMapLocation(newLat, longitude)\n  }\n  const onchangeLong = (event) => {\n    const newLong = Number(event.target.value)\n    setLongitude(newLong)\n    setMapLocation(latitude, newLong)\n  }\n  const onchangeName = (event) => {\n    setName(event.target.value)\n  }\n  const onchangePhone = (event) => {\n    setPhone(event.target.value)\n  }\n  const onchangeEmail = (event) => {\n    setEmail(event.target.value)\n  }\n  const onchangePDFTranslation = (event) => {\n    setPdfTranslation(event.target.value)\n  }\n\n  const isSubmitDisabled = (latitude === null) || (longitude === null) || !name\n\n  const externalMapLink = (latitude !== null) && (longitude !== null)\n    ? `http://maps.google.com/?q=${latitude},${longitude}`\n    : 'http://maps.google.com'\n\n  return (\n    <div>\n      <div class='d-flex justify-content-between flex-wrap flex-md-nowrap align-items-left pt-3 pb-2 mb-3 border-bottom'>\n        <h1 class='h2'>{t('create_checkpoint_title')}</h1>\n      </div>\n      <input id='search-text-field' type='text' placeholder={t('create_checkpoint_address')} class='form-control' />\n      <div id='map-canvas' />\n      <a href={externalMapLink} class='btn btn-primary mb-3' target='_blank'>{t('create_checkpoint_external_map')}</a>\n      <form class='form-create-checkpoint'>\n        <label style={{ display: 'none' }}>{t('create_checkpoint_lat')}</label>\n        <input style={{ display: 'none' }} value={latitude || ''} onChange={onchangeLat} type='number' placeholder={t('create_checkpoint_lat')} class='form-control mb-3' />\n        <label style={{ display: 'none' }}>{t('create_checkpoint_long')}</label>\n        <input style={{ display: 'none' }} value={longitude || ''} onChange={onchangeLong} type='number' placeholder={t('create_checkpoint_long')} class='form-control mb-3' />\n        <label>{t('create_checkpoint_name')}</label>\n        <input value={name} onChange={onchangeName} type='text' placeholder={t('create_checkpoint_name')} maxlength='80' class='form-control mb-3' />\n        <label>{t('create_checkpoint_phone')}</label>\n        <input value={phone} onChange={onchangePhone} type='text' placeholder={t('create_checkpoint_phone')} class='form-control mb-3' />\n        <label>{t('create_checkpoint_email')}</label>\n        <input value={email} onChange={onchangeEmail} type='text' placeholder={t('create_checkpoint_email')} class='form-control mb-3' />\n        {pdfTranslations.length > 0 && (\n          <div>\n            <label>{t('create_checkpoint_additional_language')}</label>\n            <select class='custom-select mb-3' onChange={onchangePDFTranslation} value={pdfTranslation}>\n              <option value=''>{t('create_checkpoint_additional_language_none')}</option>\n              {pdfTranslations.map((pdfTranslation, index) => {\n                return (\n                  <option key={index} value={pdfTranslation.languageCode}>English + {pdfTranslation.languageName}</option>\n                )\n              })}\n            </select>\n          </div>\n        )}\n      </form>\n      <button class='btn btn-lg btn-warning btn-block mt-3 mb-3' onClick={onSubmitCreateCheckpoint} disabled={isSubmitDisabled}>{t('create_checkpoint_submit')}</button>\n    </div>\n  )\n}\n","/home/esteban/Documents/TrackCOVID-community/admin/src/components/Reports.js",["85"],"/* globals */\nimport React, { useState, useEffect } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { fetchCheckpointLocations } from '../helpers/api'\n\nconst serverUrl = process.env.REACT_APP_SERVER_DOMAIN\nlet markers = []\n\nexport function Reports () {\n  const [map, setMap] = useState(null)\n  const [checkpoints, setCheckpoints] = useState([])\n  const [checkpointsDisplay, setCheckpointsDisplay] = useState([])\n  const [locationCounts, setLocationCounts] = useState({})\n  const { t } = useTranslation()\n\n  async function init () {\n    const fetchedCheckpoints = await fetchCheckpointLocations()\n    const uniqueLocationFlags = {}\n    const uniqueCheckpoints = fetchedCheckpoints.filter(cp => {\n      const isUnique = !uniqueLocationFlags[cp.key]\n      uniqueLocationFlags[cp.key] = uniqueLocationFlags[cp.key]\n        ? uniqueLocationFlags[cp.key] + 1\n        : 1\n      return isUnique\n    })\n    setLocationCounts(uniqueLocationFlags)\n    setCheckpointsDisplay(uniqueCheckpoints.map(() => true))\n    setCheckpoints(uniqueCheckpoints)\n    const myOptions = {\n      mapTypeControl: false,\n      navigationControl: false,\n      mapTypeId: window.google.maps.MapTypeId.ROADMAP\n    }\n    const newMap = new window.google.maps.Map(document.getElementById('map-canvas'), myOptions)\n    setMap(newMap)\n    updateMap(newMap)\n  }\n\n  async function updateMap (newMap) {\n    const googleMap = map || newMap\n    const bounds = new window.google.maps.LatLngBounds()\n\n    const locations = checkpoints.map(checkpoint => {\n      return [checkpoint.location.name, checkpoint.location.latitude, checkpoint.location.longitude]\n    }).filter((checkpoint, index) => checkpointsDisplay[index])\n\n    var infowindow = new window.google.maps.InfoWindow()\n    var marker, i\n\n    markers.forEach((m) => {\n      m.setMap(null)\n    })\n    markers = []\n\n    for (i = 0; i < locations.length; i++) {\n      marker = new window.google.maps.Marker({\n        position: new window.google.maps.LatLng(locations[i][1], locations[i][2]),\n        map: googleMap\n      })\n      markers.push(marker)\n      bounds.extend(marker.position)\n      window.google.maps.event.addListener(marker, 'click', (function (marker, i) {\n        return function () {\n          infowindow.setContent(locations[i][0])\n          infowindow.open(googleMap, marker)\n        }\n      })(marker, i))\n    }\n    googleMap.fitBounds(bounds)\n    if (locations.length === 1) {\n      googleMap.setZoom(16)\n    }\n  }\n\n  useEffect(() => {\n    if (!map) {\n      init()\n    } else {\n      updateMap()\n    }\n  }, [map, checkpoints, checkpointsDisplay])\n\n  function onChangeDisplay (index) {\n    setCheckpointsDisplay(checkpointsDisplay.map((display, i) => {\n      if (i === index) {\n        return !display\n      } else {\n        return display\n      }\n    }))\n  }\n\n  function selectAll () {\n    setCheckpointsDisplay(checkpoints.map(() => true))\n  }\n\n  function unselectAll () {\n    setCheckpointsDisplay(checkpoints.map(() => false))\n  }\n\n  return (\n    <div>\n      <div class='d-flex justify-content-between flex-wrap flex-md-nowrap align-items-left pt-3 pb-2 mb-3 border-bottom'>\n        <h1 class='h2'>{t('reports_title')}</h1>\n      </div>\n      <div id='map-canvas' />\n      <button class='btn btn-primary mr-2' onClick={selectAll}>Select All</button>\n      <button class='btn btn-secondary' onClick={unselectAll}>Unselect All</button>\n      <table class='table mt-3'>\n        <thead>\n          <tr>\n            <th scope='col'>Show on map</th>\n            <th scope='col'>Location</th>\n            <th scope='col'>Phone</th>\n            <th scope='col'>Email</th>\n            <th scope='col'>Exposures</th>\n          </tr>\n        </thead>\n        <tbody>\n          {checkpoints.map((checkpoint, checkpointIndex) => {\n            return (\n              <tr key={checkpointIndex}>\n                <th scope='row'>\n                  <div class='form-check'>\n                    <input class='form-check-input' type='checkbox' checked={checkpointsDisplay[checkpointIndex]} onChange={() => onChangeDisplay(checkpointIndex)} />\n                  </div>\n                </th>\n                <td>{checkpoint.location.name}</td>\n                <td>{checkpoint.location.phone}</td>\n                <td>{checkpoint.location.email}</td>\n                <td>{locationCounts[checkpoint.key]}</td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <a class='btn btn-lg btn-warning btn-block mt-3 mb-3' href={`${serverUrl}/admin/hotspots.csv`}>{t('reports_csv')}</a>\n    </div>\n  )\n}\n","/home/esteban/Documents/TrackCOVID-community/admin/src/components/Account.js",["86"],"/* globals alert */\nimport React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { updatePassword, updateUsername } from '../helpers/api'\n\nexport function Account () {\n  const [currentPassword, setCurrentPassword] = useState('')\n  const [newPassword, setNewPassword] = useState('')\n  const [newUsername, setNewUsername] = useState('')\n  const { t } = useTranslation()\n\n  const onSubmitNewPassword = async (event) => {\n    event.preventDefault()\n    const passwordRegex = /^[\\w!@#$%^&*]{8,}$/\n    if (passwordRegex.test(newPassword)) {\n      const updatePasswordSuccess = await updatePassword(currentPassword, newPassword)\n      if (!updatePasswordSuccess) {\n        alert(t('account_current_password_incorrect'))\n      } else {\n        alert(t('account_update_password_success'))\n        setCurrentPassword('')\n        setNewPassword('')\n      }\n    } else {\n      alert(t('account_new_password_invalid'))\n    }\n  }\n\n  const onSubmitNewUsername = async (event) => {\n    event.preventDefault()\n    const updateUsernameSuccess = await updateUsername({ username: newUsername })\n    if (!updateUsernameSuccess) {\n      alert(t('account_update_username_fail'))\n    } else {\n      alert(t('account_update_username_success'))\n      setCurrentPassword('')\n      setNewPassword('')\n    }\n  }\n\n  const onchangeCurrentPassword = (event) => {\n    setCurrentPassword(event.target.value)\n  }\n  const onchangeNewPassword = (event) => {\n    setNewPassword(event.target.value)\n  }\n  const onchangeNewUsername = (event) => {\n    setNewUsername(event.target.value)\n  }\n\n  return (\n    <div>\n      <div class='d-flex justify-content-between flex-wrap flex-md-nowrap align-items-left pt-3 pb-2 mb-3 border-bottom'>\n        <h1 class='h2'>{t('account_title')}</h1>\n      </div>\n      <form class='form-signin' onSubmit={onSubmitNewUsername}>\n        <h2 class='h3 mb-3 font-weight-normal'>{t('account_update_username_title')}</h2>\n        <label for='new-username' class='sr-only'>{t('account_new_username')}:</label>\n        <input value={newUsername} onChange={onchangeNewUsername} type='email' id='new-username' name='new-username' placeholder={t('account_new_username')} class='form-control' />\n        <button class='btn btn-lg btn-warning btn-block mt-3' type='submit'>{t('account_update_username_submit')}</button>\n      </form>\n      <form class='form-signin' onSubmit={onSubmitNewPassword}>\n        <h2 class='h3 mb-3 font-weight-normal'>{t('account_update_password_title')}</h2>\n        <p>{t('account_password_instructions')}</p>\n        <label for='current-password' class='sr-only'>{t('account_current_password')}:</label>\n        <input value={currentPassword} onChange={onchangeCurrentPassword} type='password' id='username' name='current-password' placeholder={t('account_current_password')} class='form-control' />\n        <label for='new-password' class='sr-only'>{t('account_new_password')}:</label>\n        <input value={newPassword} onChange={onchangeNewPassword} type='password' id='username' name='new-password' placeholder={t('account_new_password')} class='form-control' />\n        <button class='btn btn-lg btn-warning btn-block mt-3' type='submit'>{t('account_update_password_submit')}</button>\n      </form>\n    </div>\n  )\n}\n","/home/esteban/Documents/TrackCOVID-community/admin/src/helpers/json.js",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":1,"column":12,"nodeType":"93","messageId":"94","endLine":1,"endColumn":17},{"ruleId":"95","severity":1,"message":"96","line":60,"column":6,"nodeType":"97","endLine":60,"endColumn":18,"suggestions":"98"},{"ruleId":"91","severity":1,"message":"99","line":1,"column":12,"nodeType":"93","messageId":"94","endLine":1,"endColumn":17},{"ruleId":"91","severity":1,"message":"92","line":1,"column":12,"nodeType":"93","messageId":"94","endLine":1,"endColumn":17},{"ruleId":"91","severity":1,"message":"92","line":1,"column":12,"nodeType":"93","messageId":"94","endLine":1,"endColumn":17},{"ruleId":"100","severity":1,"message":"101","line":38,"column":37,"nodeType":"102","endLine":38,"endColumn":127},{"ruleId":"91","severity":1,"message":"92","line":1,"column":12,"nodeType":"93","messageId":"94","endLine":1,"endColumn":17},{"ruleId":"91","severity":1,"message":"103","line":1,"column":19,"nodeType":"93","messageId":"94","endLine":1,"endColumn":29},{"ruleId":"91","severity":1,"message":"92","line":1,"column":12,"nodeType":"93","messageId":"94","endLine":1,"endColumn":17},{"ruleId":"104","severity":1,"message":"105","line":111,"column":11,"nodeType":"102","endLine":111,"endColumn":89},{"ruleId":"104","severity":1,"message":"105","line":161,"column":25,"nodeType":"102","endLine":161,"endColumn":127},{"ruleId":"104","severity":1,"message":"105","line":209,"column":11,"nodeType":"102","endLine":209,"endColumn":90},{"ruleId":"95","severity":1,"message":"106","line":70,"column":6,"nodeType":"97","endLine":70,"endColumn":57,"suggestions":"107"},{"ruleId":"100","severity":1,"message":"101","line":125,"column":7,"nodeType":"102","endLine":125,"endColumn":78},{"ruleId":"95","severity":1,"message":"108","line":81,"column":6,"nodeType":"97","endLine":81,"endColumn":44,"suggestions":"109"},{"ruleId":"91","severity":1,"message":"92","line":1,"column":12,"nodeType":"93","messageId":"94","endLine":1,"endColumn":17},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-redeclare","'alert' is already defined as a built-in global variable.","Block","redeclaredAsBuiltin","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadCurrentUser'. Either include it or remove the dependency array.","ArrayExpression",["112"],"'fetch' is already defined as a built-in global variable.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'FileReader' is already defined as a built-in global variable.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'setMapLocation'. Either include it or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'init' and 'updateMap'. Either include them or remove the dependency array.",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [isLoggedIn, loadCurrentUser]",{"range":"121","text":"122"},"Update the dependencies array to be: [map, autocomplete, languageNames, pdfTranslations, setMapLocation]",{"range":"123","text":"124"},"Update the dependencies array to be: [map, checkpoints, checkpointsDisplay, init, updateMap]",{"range":"125","text":"126"},[2221,2233],"[isLoggedIn, loadCurrentUser]",[2678,2729],"[map, autocomplete, languageNames, pdfTranslations, setMapLocation]",[2556,2594],"[map, checkpoints, checkpointsDisplay, init, updateMap]"]